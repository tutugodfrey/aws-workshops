Description: >-
  (SO0124) - AWS Streaming Data Solution for Amazon Kinesis (Producer -> KDS -> KDA).
  Version v1.6.0

Parameters:
  LabVPCCIDR:
    Description: CIDR Block for Lab VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedValues:
      - 10.0.0.0/16
  LabVPCPublicSubnetCIDR:
    Description: Lab VPC Public Subnet
    Type: String
    Default: 10.0.10.0/24
    AllowedValues:
      - 10.0.10.0/24
  S3PathPrefix:
    Type: String
    Description: 'The path prefix where lab resources are stored'
    Default: "courses/ILT-TF-200-PTBSDA/v1.1.3.prod-8146a96d/lab-1"
    #Default: courses/ILT-TF-200-BIGDML/v1.0.0/lab-1-kinesis
  S3ResourceBucket:
    Type: String
    Description: 'S3 Bucket of were to pull lab resources from'
    Default: '-tcprod'
  UserId:
    Default: awsstudent
    Type: String
  #PythonScriptPath:
    #Type: String
    #Default: !Sub 's3://${AWS::Region}${S3ResourceBucket}/${S3PathPrefix}/scripts/clickstream_generator.py'

  ShardCount:
    Type: Number
    Default: 2
    MaxValue: 200
    MinValue: 1
  RetentionHours:
    Type: Number
    Default: 24
    MaxValue: 8760
    MinValue: 24
  ProducerAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  LogLevel:
    Type: String
    Default: INFO
    AllowedValues:
      - DEBUG
      - ERROR
      - INFO
      - WARN

Resources:
#-----Start - Lambda function to generate random number to use with bucket names-----#
  LambdaNumberGeneratorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaNumberGeneratorRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: allowLambdaLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: "*"

  NumberGeneratorLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          const response = require("cfn-response");

          const generateNumber = (length, chars) => {
            var result = '';
            for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];
            return result;
          }

          exports.handler = (event, context) =>{
            const str = generateNumber(event['ResourceProperties']['Length'], '0123456789');
            const responseData = {RandomNumber: str};
            response.send(event, context, response.SUCCESS, responseData);
          };
      Handler: index.handler
      Runtime: nodejs12.x
      Role: !GetAtt LambdaNumberGeneratorRole.Arn
      MemorySize: 128
      Timeout: 20

  GenerateNumber:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Length: 9
      ServiceToken: !GetAtt NumberGeneratorLambdaFunction.Arn
#-----End - Lambda function to generate random number to use with bucket names-----#

#-----  VPC Provisioning -----#
  LabVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref LabVPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: VPC
          Value: Lab VPC
        - Key: Name
          Value: Lab VPC

  LabVPCInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: LabVPC

  LabVPCAttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    DependsOn:
      - LabVPC
      - LabVPCInternetGateway
    Properties:
      VpcId: !Ref LabVPC
      InternetGatewayId: !Ref LabVPCInternetGateway

  LabVPCPublicSubnet:
    Type: 'AWS::EC2::Subnet'
    DependsOn: LabVPCAttachGateway
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: !Ref LabVPCPublicSubnetCIDR
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Lab VPC Public Subnet
      MapPublicIpOnLaunch: true

  LabVPCPublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn:
      - LabVPC
      - LabVPCAttachGateway
    Properties:
      VpcId: !Ref LabVPC
      Tags:
        - Key: Name
          Value: Lab VPC Public Route Table

  DevPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - LabVPCPublicRouteTable
      - LabVPCAttachGateway
    Properties:
      RouteTableId: !Ref LabVPCPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref LabVPCInternetGateway

  DevPublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - LabVPCPublicRouteTable
      - LabVPCPublicSubnet
      - LabVPCAttachGateway
    Properties:
      SubnetId: !Ref LabVPCPublicSubnet
      RouteTableId: !Ref LabVPCPublicRouteTable

#----- KDS Provisioning-----#
  KdsClickstreamData:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      ShardCount: !Ref ShardCount
      RetentionPeriodHours: !Ref RetentionHours
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis
    Metadata:
      'aws:cdk:path': >-
        aws-streaming-data-solution-for-kinesis-using-kpl-and-kinesis-data-analytics/Kds/DataStream/Resource

  KdsClickstreamDataRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join
                  - ''
                  -   - 'arn:'
                      - !Ref 'AWS::Partition'
                      - ':logs:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':log-group:/aws/lambda/*'
            Version: 2012-10-17
          PolicyName: CloudWatchLogsPolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - 'kinesis:EnableEnhancedMonitoring'
                  - 'kinesis:DisableEnhancedMonitoring'
                Effect: Allow
                Resource: '*'
            Version: 2012-10-17
          PolicyName: MonitoringPolicy
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: >-
              Kinesis enhanced monitoring actions do not support resource level
              permissions

  KdsCustomResourceSensorData:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Sub 'solutions-${AWS::Region}'
        S3Key: >-
          aws-streaming-data-solution-for-amazon-kinesis/v1.6.0/asset6a05ae50ced08b10f6d959a4e5a1adc1e1cf875506e9fa344770518803717b40.zip
      Role: !GetAtt
        - KdsClickstreamDataRole
        - Arn
      Environment:
        Variables:
          AWS_SDK_USER_AGENT: '{ "user_agent_extra": "AwsSolution/SO0124/v1.6.0" }'
      Handler: lambda_function.handler
      Runtime: python3.8
      Timeout: 30
    DependsOn:
      - KdsClickstreamDataRole
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: This function does not need to be deployed in a VPC
          - id: W92
            reason: This function does not require reserved concurrency

#----- EC2 Producer -----#
  EC2ProducerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: KPL security group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow HTTP outbound traffic
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          Description: Allow HTTPS outbound traffic
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId: !Ref LabVPC
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: Outbound access is allowed to connect to Kinesis
          - id: F1000
            reason: >-
              No egress rule defined as default (all traffic allowed outbound)
              is sufficient for this resource

  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: !Join
                - ''
                -   - ec2.
                    - !Ref 'AWS::URLSuffix'
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore # Allows SSM connections to the instance.
    Metadata:
      'aws:cdk:path': >-
        aws-streaming-data-solution-for-kinesis-using-kpl-and-kinesis-data-analytics/Kpl/Role/Resource

  EC2RoleDefaultPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'kinesis:ListShards'
              - 'kinesis:PutRecord'
              - 'kinesis:PutRecords'
            Effect: Allow
            Resource:
              - !Join
                  - ''
                  -   - !GetAtt
                          - KdsClickstreamData
                          - Arn
          - Action:
              - 'kinesis:DescribeStream'
              - 'kinesis:DescribeStreamSummary'
              - 'kinesis:DescribeStreamConsumer'
              - 'kinesis:RegisterStreamConsumer'
              - 'kinesis:SubscribeToShard'
            Effect: Allow
            Resource:
              - !Join
                  - ''
                  -   - !GetAtt
                          - KdsClickstreamData
                          - Arn
        Version: 2012-10-17
      PolicyName: EC2RoleDefaultPolicy
      Roles:
        - !Ref EC2Role
    Metadata:
      'aws:cdk:path': >-
        aws-streaming-data-solution-for-kinesis-using-kpl-and-kinesis-data-analytics/Kpl/Role/DefaultPolicy/Resource

  EC2SessionManagerPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'ssm:UpdateInstanceInformation'
              - 'ssmmessages:CreateControlChannel'
              - 'ssmmessages:CreateDataChannel'
              - 'ssmmessages:OpenControlChannel'
              - 'ssmmessages:OpenDataChannel'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: EC2SessionManagerPolicy
      Roles:
        - !Ref EC2Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: Session Manager actions do not support resource level permissions

  EC2MonitoringPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action: 'cloudwatch:PutMetricData'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: EC2MonitoringPolicy
      Roles:
        - !Ref EC2Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: PutMetricData action does not support resource level permissions

  EC2InstancePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 's3:CopyObject'
              - 's3:List*'
              - 's3:Describe*'
              - 's3:Get*'
              - 'kinesis:PutRecord'
            Effect: Allow
            Resource: '*'
      PolicyName: EC2InstanceRestrictedAccess
      Roles:
        - !Ref EC2Role

  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref EC2Role
    Metadata:
      'aws:cdk:path': >-
        aws-streaming-data-solution-for-kinesis-using-kpl-and-kinesis-data-analytics/Kpl/InstanceProfile

  EC2Producer:
    Type: 'AWS::EC2::Instance'
    Properties:
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref ProducerAmiId
      InstanceType: t3.small
      SecurityGroupIds:
        - !GetAtt
            - EC2ProducerSecurityGroup
            - GroupId
      SubnetId: !Ref LabVPCPublicSubnet
      Tags:
        - Key: Name
          Value: EC2Producer
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          yum update -y
          yum install -y python3
          rm -rf /usr/bin/aws
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install -b
          pip3 install boto3
          echo export AWS_DEFAULT_REGION=`curl http://169.254.169.254/latest/dynamic/instance-identity/document|grep region|awk -F\" '{print $4}'` >> /env.sh
          aws s3 cp s3://${AWS::Region}${S3ResourceBucket}/${S3PathPrefix}/scripts/clickstream_generator_items.py /home/ssm-user/clickstream_generator_items.py
          chmod 755 /home/ssm-user/clickstream_generator_items.py

  SsmRunShellConfig:
    Type: AWS::SSM::Document
    Properties:
      Name: SSM-SessionManagerRunShell
      DocumentType: Session
      DocumentFormat: YAML
      Content:
        schemaVersion: "1.0"
        description: Document to modify Session Manager idle timeout and runas user.
        sessionType: Standard_Stream
        inputs:
          idleSessionTimeout: "60"
          runAsDefaultUser: ssm-user
          shellProfile: #---Enter commands to run when connecting to the instance via SSM---#
            linux: source /env.sh; cd /home/ssm-user;

#----- Start Bucket Creation -----#
  AccessLogsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      BucketName: !Sub accesslogbucket-${AWS::Region}-${GenerateNumber.RandomNumber}
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: This bucket is used to store access logs for another bucket
          - id: W51
            reason: This bucket does not need a bucket policy

  DataBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub databucket-${AWS::Region}-${GenerateNumber.RandomNumber}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
            Id: multipart-upload-rule
            Status: Enabled
          - Id: intelligent-tiering-rule
            Status: Enabled
            Transitions:
              - StorageClass: INTELLIGENT_TIERING
                TransitionInDays: 1
      LoggingConfiguration:
        DestinationBucketName: !Ref AccessLogsBucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: false
        IgnorePublicAcls: true
        RestrictPublicBuckets: false
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      'aws:cdk:path': >-
        aws-streaming-data-solution-for-kinesis-using-kpl-and-kinesis-data-analytics/Output/Bucket/Resource

  DataBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref DataBucket
      PolicyDocument:
        Statement:
          - Action: '*'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'
            Effect: Deny
            Principal:
              AWS: '*'
            Resource:
              - !Join
                  - ''
                  -   - !GetAtt
                          - DataBucket
                          - Arn
                      - /*
              - !GetAtt
                  - DataBucket
                  - Arn
            Sid: HttpsOnly
        Version: 2012-10-17
    Metadata:
      'aws:cdk:path': >-
        aws-streaming-data-solution-for-kinesis-using-kpl-and-kinesis-data-analytics/Output/Bucket/Policy/Resource

  #### Data Copy/Delete to S3 bucket ####
  dataRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: "dataCopyPol"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:List*
                  - kms:Decrypt
                  - kms:Encrypt
                  - kms:GenerateDataKey
                  - kms:ReEncryptTo
                  - kms:ReEncryptFrom
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DeleteLogGroup
                  - logs:DeleteLogStream
                  - logs:PutLogEvents
                Resource: '*'

  FunctionS3Cleaner:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub "${AWS::Region}${S3ResourceBucket}"
        S3Key: !Sub "${S3PathPrefix}/scripts/s3_resource.zip"
      Description: Emtpies an S3 bucket on delete - always returns success message to cloudformation
      Handler: index.lambda_handler
      Role: !GetAtt dataRole.Arn
      MemorySize: 128
      Timeout: 10
      Runtime: python3.8
    DependsOn:
      - dataRole

  CleanS3DataBucket:
    Type: Custom::FunctionS3Cleaner
    Properties:
      ServiceToken: !GetAtt FunctionS3Cleaner.Arn
      TargetS3Bucket: !Ref DataBucket

#### End Data Copy ####


#----- KDF Provisioning -----#
  KdfLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 365
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: >-
              Log group data is always encrypted in CloudWatch Logs using an AWS
              Managed KMS Key

  KdfLogStream:
    Type: 'AWS::Logs::LogStream'
    Properties:
      LogGroupName: !Ref KdfLogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      'aws:cdk:path': >-
        aws-streaming-data-solution-for-kinesis-using-kpl-and-kinesis-data-analytics/Kda/LogStream/Resource

  FirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: FirehoseRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - firehose.amazonaws.com
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 's3:AbortMultipartUpload'
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:ListBucketMultipartUploads'
                  - 's3:PutObject'
                Resource:
                  - !Join
                      - ''
                      -   - !GetAtt
                              - DataBucket
                              - Arn
                          - /*
                  - !GetAtt
                      - DataBucket
                      - Arn
            Version: 2012-10-17
          PolicyName: S3Policy
        - PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'kinesis:DescribeStream'
                  - 'kinesis:GetShardIterator'
                  - 'kinesis:GetRecords'
                  - 'kinesis:ListShards'
                Resource:
                  - !Join
                      - ''
                      -   - 'arn:'
                          - !Ref 'AWS::Partition'
                          - ':kinesis:'
                          - !Ref 'AWS::Region'
                          - ':'
                          - !Ref 'AWS::AccountId'
                          - ':'
                          - 'stream/'
                          - !Ref KdsClickstreamData
            Version: 2012-10-17
          PolicyName: KinesisPolicy
        - PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:PutLogEvents'
                Resource:
                  - !Join
                      - ''
                      -   - 'arn:'
                          - !Ref 'AWS::Partition'
                          - ':logs:'
                          - !Ref 'AWS::Region'
                          - ':'
                          - !Ref 'AWS::AccountId'
                          - ':'
                          - 'log-group:'
                          - !Ref KdfLogGroup
                          - ':log-stream:'
                          - !Ref KdfLogStream
            Version: 2012-10-17
          PolicyName: LogsPolicy

Outputs:
  KinesisDataStreamName:
    Description: Name of the Amazon Kinesis Data stream
    Value: !Ref KdsClickstreamData
  DataBucketName:
    Description: Name of the Amazon S3 destination bucket
    Value: !Ref DataBucket
  Region:
    Description: Lab Region
    Value: !Ref AWS::Region
  CommandHostSessionManagementURL:
    Description: The URL to the Session Management Console for CommandHost
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${EC2Producer}?region=${AWS::Region}