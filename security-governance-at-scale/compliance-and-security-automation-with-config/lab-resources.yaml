AWSTemplateFormatVersion: 2010-09-09
Description: Lab 3 for AWS Security Governance at Scale

Parameters:
  LabVpcCidr:
    Type: String
    Default: 10.10.0.0/16
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$

  LabSubnetCidr:
    Type: String
    Default: 10.10.1.0/24
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$

  LatestAL2AmiId: # Locate latest Amazon Linux 2 AMI from public parameter store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:
#-----Start - Create lab networking resources-----#
  LabVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref LabVpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Lab VPC

  LabSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref LabSubnetCidr
      VpcId: !Ref LabVpc
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Lab Subnet (Public)

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Internet Gateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref LabVpc
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LabVpc

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  LabSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref LabSubnet
      RouteTableId: !Ref PublicRouteTable
#-----End - Create lab networking resources-----#

#-----Start - Create security group for AWSConfigLab-----#
  AWSConfigLabSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: AWSConfigLabSG
      GroupDescription: Network access rules for the EC2 instance
      VpcId: !Ref LabVpc
      SecurityGroupEgress:
        - IpProtocol: TCP
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: TCP
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

#-----Start - Create EC2 instance-----#
  PublicIpInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAL2AmiId
      InstanceType: t3.micro
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            DeleteOnTermination: true
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          GroupSet:
            - !Ref AWSConfigLabSecurityGroup
          SubnetId: !Ref LabSubnet
      Tags:
        - Key: Name
          Value: Public IP
#-----End - Create EC2 instance-----#

#-----Start - Create isolated EC2 instance-----#
  PrivateIpInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAL2AmiId
      InstanceType: t3.micro
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            DeleteOnTermination: true
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeviceIndex: '0'
          GroupSet:
            - !Ref AWSConfigLabSecurityGroup
          SubnetId: !Ref LabSubnet
      Tags:
        - Key: Name
          Value: Private IP
#-----End - Create isolated EC2 instance-----#

#-----Start - Lambda function to generate random number to use with bucket names-----#
  LambdaRunRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: allowLambdaLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: "*"

  GenerateNumberLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          const response = require("cfn-response");

          const generateNumber = (length, chars) => {
            var result = '';
            for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];
            return result;
          }

          exports.handler = (event, context) =>{
            const str = generateNumber(event['ResourceProperties']['Length'], '0123456789');
            const responseData = {RandomNumber: str};
            response.send(event, context, response.SUCCESS, responseData);
          };
      Handler: index.handler
      Runtime: nodejs12.x
      Role: !GetAtt LambdaRunRole.Arn
      MemorySize: 128
      Timeout: 20

  GenerateNumber:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Length: 9
      ServiceToken: !GetAtt GenerateNumberLambdaFunction.Arn
#-----End - Lambda function to generate random number to use with bucket names-----#

#-----Start - Create lab S3 buckets-----#

  VersionedBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub versioned-bucket-${GenerateNumber.RandomNumber}
      PublicAccessBlockConfiguration: #Sets "Block all public access" to "On" for the bucket
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  VersionedLoggedBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub versioned-logged-bucket-${GenerateNumber.RandomNumber}
      PublicAccessBlockConfiguration: #Sets "Block all public access" to "On" for the bucket
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  LogFilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub s3-log-files-${GenerateNumber.RandomNumber}
      AccessControl: LogDeliveryWrite
      PublicAccessBlockConfiguration: #Sets "Block all public access" to "On" for the bucket
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

# IAM role used by AWS Config auto-remediation to change the configuration on S3 buckets
  AutomationServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AutomationServiceRole
      Description: IAM role used by AWS config/SSM to remediate S3 buckets.
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: S3versioningAndLogPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:PutBucketVersioning
                  - s3:PutBucketLogging
                  - ec2:TerminateInstances
                Resource: '*'
#-----End - Create lab S3 buckets-----#

#-----Start - Create an IAM group with ReadOnly permissions and add the student user to it-----#
Outputs:
  AwsRegion:
    Description: The primary region the lab is running in.
    Value: !Sub ${AWS::Region}

  VersionedBucket:
    Description: An S3 bucket that should have versioning turned on.
    Value: !Ref VersionedBucket

  VersionedLoggedBucket:
    Description: An S3 bucket that should have versioning and logging turned on.
    Value: !Ref VersionedLoggedBucket

  AutomationServiceRole:
    Description: The IAM role used by AWS Config to remediate noncompliant resources.
    Value: !GetAtt AutomationServiceRole.Arn

  LogFilesBucket:
    Description: An Amazon S3 bucket used to store logging data.
    Value: !Ref LogFilesBucket
