AWSTemplateFormatVersion: 2010-09-09
Description: "Lab 1: Low latency data analytics using Apache Spark on Amazon EMR"
Parameters:
  UserId:
    Default: awsstudent
    Type: String
  LabVPCCIDR:
    Description: CIDR Block for Lab VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedValues:
      - 10.0.0.0/16
  LabVPCPublicSubnetCIDR:
    Description: Lab VPC Public Subnet
    Type: String
    Default: 10.0.10.0/24
    AllowedValues:
      - 10.0.10.0/24
  EmrRelease:
    Type: String
    Description: The current EMR AMI version to use for labs.
    #Default: emr-6.3.0
    Default: emr-6.3.0
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: 10.0.0.0/16
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  # Linux image parameter
  AmazonLinuxAMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2
  S3PathPrefix:
    Type: String
    Description: 'The path prefix where lab resources are stored'
    Default: "courses/ILT-TF-200-PTBBDA/v1.1.0.prod-093a98a8/lab-1"
  S3ResourceBucket:
    Type: String
    Description: 'S3 Bucket of were to pull lab resources from'
    Default: '-tcprod'

Resources:
#-----Start - Lambda function to generate random number to use with bucket names-----#
  LambdaNumberGeneratorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaNumberGeneratorRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: allowLambdaLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: "*"

  NumberGeneratorLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          const response = require("cfn-response");

          const generateNumber = (length, chars) => {
            var result = '';
            for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];
            return result;
          }

          exports.handler = (event, context) =>{
            const str = generateNumber(event['ResourceProperties']['Length'], '0123456789');
            const responseData = {RandomNumber: str};
            response.send(event, context, response.SUCCESS, responseData);
          };
      Handler: index.handler
      Runtime: nodejs16.x
      Role: !GetAtt LambdaNumberGeneratorRole.Arn
      MemorySize: 128
      Timeout: 20

  GenerateNumber:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Length: 9
      ServiceToken: !GetAtt NumberGeneratorLambdaFunction.Arn
#-----End - Lambda function to generate random number to use with bucket names-----#

#### KMS key to encrypt all the data ####
  emrKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key used to encrypt emr and s3 data
      KeyPolicy:
        Version: '2012-10-17'
        Id: emrKey
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: '*'
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !GetAtt EMREC2DefaultRole.Arn
            Action: 'kms:*'
            Resource: '*'

#### S3 Buckets 
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub databucket-${AWS::Region}-${GenerateNumber.RandomNumber}
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
              KMSMasterKeyID: !GetAtt emrKMSKey.Arn
            BucketKeyEnabled: true

  ChallengeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub challengebucket-${AWS::Region}-${GenerateNumber.RandomNumber}
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
              KMSMasterKeyID: !GetAtt emrKMSKey.Arn
            BucketKeyEnabled: true

#### IAM Roles and Permissions.

  EMRNotebookRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - elasticmapreduce.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceEditorsRole'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
      Path: /
      Policies:
        - PolicyName: allowkmscommands
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:Encrypt
                  - kms:GenerateDataKey
                  - kms:ReEncryptTo
                  - kms:ReEncryptFrom
                Resource: '*'

  EMREC2DefaultRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role'
      Path: /
      Policies:
        - PolicyName: allowkmscommands
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:Encrypt
                  - kms:GenerateDataKey
                  - kms:ReEncryptTo
                  - kms:ReEncryptFrom
                Resource: '*'
              - Effect: Deny
                Action:
                  - ec2:RunInstances
                Resource: arn:aws:ec2:*:*:instance/*
                Condition:
                  StringNotEquals:
                    ec2:InstanceType:
                      - m4.large
                      - m5.xlarge
              - Effect: Deny
                Action:
                  - ec2:*Spot*
                Resource: '*'
  EMREC2InstanceProfile:
    Properties:
      Path: /
      Roles:
        - !Ref EMREC2DefaultRole
    Type: 'AWS::IAM::InstanceProfile'
  EMRDefaultRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: elasticmapreduce.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole'
      Path: /
      Policies:
        - PolicyName: allowkmscommands
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:Encrypt
                  - kms:GenerateDataKey
                  - kms:ReEncryptTo
                  - kms:ReEncryptFrom
                Resource: '*'
              - Effect: Deny
                Action:
                  - ec2:RunInstances
                Resource: arn:aws:ec2:*:*:instance/*
                Condition:
                  StringNotEquals:
                    ec2:InstanceType:
                      - m4.large
                      - m5.xlarge
              - Effect: Deny
                Action:
                  - ec2:*Spot*
                Resource: '*'

#### Start Network infrastructure ####              
  LabVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref LabVPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: VPC
          Value: Lab VPC
        - Key: Name
          Value: Lab VPC
  LabVPCInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: LabVPC
  LabVPCAttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    DependsOn:
      - LabVPC
      - LabVPCInternetGateway
    Properties:
      VpcId: !Ref LabVPC
      InternetGatewayId: !Ref LabVPCInternetGateway
  LabVPCPublicSubnet:
    Type: 'AWS::EC2::Subnet'
    DependsOn: LabVPCAttachGateway
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: !Ref LabVPCPublicSubnetCIDR
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: Lab VPC Public Subnet
  LabVPCPublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn:
      - LabVPC
      - LabVPCAttachGateway
    Properties:
      VpcId: !Ref LabVPC
      Tags:
        - Key: Name
          Value: Lab VPC Public Route Table
  DevPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - LabVPCPublicRouteTable
      - LabVPCAttachGateway
    Properties:
      RouteTableId: !Ref LabVPCPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref LabVPCInternetGateway
  DevPublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    DependsOn:
      - LabVPCPublicRouteTable
      - LabVPCPublicSubnet
      - LabVPCAttachGateway
    Properties:
      SubnetId: !Ref LabVPCPublicSubnet
      RouteTableId: !Ref LabVPCPublicRouteTable
  ElasticMapReduceMasterSSH:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22 for EMR master node
      VpcId: !Ref LabVPC
      Tags:
        - Key: Name
          Value: ElasticMapReduce-master-SSH
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref LabVPCCIDR
#### End Network infrastructure ####

#### Start EMR Cluster ####
  labcluster:
    Type: 'AWS::EMR::Cluster'
    DependsOn:
      - waitCondition
      - DevPublicRoute
    Properties:
      Applications:
        - Name: Spark
        - Name: JupyterEnterpriseGateway
        - Name: Flink
        - Name: Livy
      Instances:
        AdditionalMasterSecurityGroups:
          - !Ref ElasticMapReduceMasterSSH
        MasterInstanceGroup:
          InstanceCount: 1
          InstanceType: m4.large
          Name: Master
        CoreInstanceGroup:
          InstanceCount: 2
          InstanceType: m4.large
          Name: Core
        Ec2SubnetId: !Ref LabVPCPublicSubnet
        Ec2KeyName: EMRKey
      Name: labcluster
      JobFlowRole: !Ref EMREC2InstanceProfile
      ServiceRole: !Ref EMRDefaultRole
      ReleaseLabel: !Ref EmrRelease
      VisibleToAllUsers: true

#### End EMR Cluster ####

#### Command Host Configuration ####
  CommandHostSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref LabVPC
      GroupDescription: Enable HTTP access via port 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation

  CommandHostRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service: ["ec2.amazonaws.com"]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateKeyPair
                  - ec2:DeleteKeyPair
                Resource: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/EMRKey
              - Effect: Allow
                Action:
                  - elasticmapreduce:List*
                  - elasticmapreduce:Describe*
                Resource: "*"

  CommandHostInstProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref CommandHostRole

  CommandHost:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT5M
    Properties:
      IamInstanceProfile: !Ref CommandHostInstProfile
      ImageId: !Ref AmazonLinuxAMIID
      InstanceType: t3.micro
      NetworkInterfaces:
        - DeviceIndex: "0"
          AssociatePublicIpAddress: true
          SubnetId: !Ref LabVPCPublicSubnet
          GroupSet:
            - !Ref CommandHostSG
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash -ex
          # Installing updates and jq
          yum update -y
          yum -y install jq

          ## Delete existing EMRKey pair and create new one.
          ## Deleting existing EMRKey pair if it exists and creating new one.
          if ($(aws ec2 create-key-pair --key-name EMRKey --region ${AWS::Region} --query 'KeyMaterial' --output text > /home/ec2-user/EMRKey.pem)); then 
            echo "Good"
          elif ($(aws ec2 delete-key-pair --key-name EMRKey --region ${AWS::Region})); then 
              echo "Deleted" 
              aws ec2 create-key-pair --key-name EMRKey --region ${AWS::Region} --query 'KeyMaterial' --output text > /home/ec2-user/EMRKey.pem
              echo "Redone the key"
          fi

          # Changing the key file to read permission
          chmod +r /home/ec2-user/EMRKey.pem

          # Checking if ssm-user exist in the EC2 instance. If exists, the condition will pass else will create ssm-user
          if id -u "ssm-user" >/dev/null 2>&1; then 
            echo 'ssm-user already exists' 
          else 
            useradd ssm-user -m -U
          fi

          # Updating aws configuration for ssm-user
          mkdir /home/ssm-user/.aws &&
          echo "[default]" > /home/ssm-user/.aws/config &&
          echo "region = ${AWS::Region}" >> /home/ssm-user/.aws/config &&
          cp /home/ec2-user/EMRKey.pem /home/ssm-user/ &&
          chmod +r /home/ssm-user/EMRKey.pem

          # Starting wait condition - this delay is introduced to make sure emr cluster gets the correct key pair.
          /opt/aws/bin/cfn-signal -e $? "${waitConditionHandle}"
          /opt/aws/bin/cfn-signal --stack ${AWS::StackName} --region ${AWS::Region} --resource CommandHost -e 0


  waitConditionHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Properties: {}

  waitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: CommandHost
    Properties:
      Count: 0
      Handle: !Ref 'waitConditionHandle'
      Timeout: '240'

#### End Command Host Configuration ####

#### Data Copy/Delete to S3 bucket ####
  dataRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: "dataCopyPol"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:List*
                  - kms:Decrypt
                  - kms:Encrypt
                  - kms:GenerateDataKey
                  - kms:ReEncryptTo
                  - kms:ReEncryptFrom
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DeleteLogGroup
                  - logs:DeleteLogStream
                  - logs:PutLogEvents
                Resource: '*'

  FunctionS3Cleaner:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub "${AWS::Region}${S3ResourceBucket}"
        S3Key: !Sub "${S3PathPrefix}/scripts/s3_resource.zip"
      Description: Emtpies an S3 bucket on delete - always returns success message to cloudformation
      Handler: index.lambda_handler
      Role: !GetAtt dataRole.Arn
      MemorySize: 128
      Timeout: 10
      Runtime: python3.8
    DependsOn:
      - dataRole

  FunctionS3Upload:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub "${AWS::Region}${S3ResourceBucket}"
        S3Key: !Sub "${S3PathPrefix}/scripts/s3_resource.zip"
      Description: Copies files to S3 bucket on create - always returns success message to cloudformation
      Handler: index.lambda_handler
      Role: !GetAtt dataRole.Arn
      MemorySize: 128
      Timeout: 10
      Runtime: python3.8
    DependsOn:
      - dataRole

  CopyFilesToS3DataBucket:
    Type: Custom::FunctionCopyFilesToS3
    Properties:
      ServiceToken: !GetAtt FunctionS3Upload.Arn
      SourceS3Bucket: !Sub "${AWS::Region}${S3ResourceBucket}"
      SourceBucketRegion: !Sub "${AWS::Region}"
      TargetS3Bucket: !Ref DataBucket
      TargetBucketRegion: !Ref AWS::Region
      FileList:
        - SourceKey: !Sub "${S3PathPrefix}/scripts/stock_prices.csv"
          TargetKey: "data/stock_prices.csv"
        - SourceKey: ""
          TargetKey: "logs/"
        - SourceKey: ""
          TargetKey: "Results/"
        - SourceKey: ""
          TargetKey: "notebooks/"


  CopyFilesToS3ChallengeBucket:
    Type: Custom::FunctionCopyFilesToS3
    Properties:
      ServiceToken: !GetAtt FunctionS3Upload.Arn
      SourceS3Bucket: !Sub "${AWS::Region}${S3ResourceBucket}"
      SourceBucketRegion: !Sub "${AWS::Region}"
      TargetS3Bucket: !Ref ChallengeBucket
      TargetBucketRegion: !Ref AWS::Region
      FileList:
        - SourceKey: !Sub "${S3PathPrefix}/scripts/movies.csv"
          TargetKey: "data/movies.csv"

  CleanS3DataBucket:
    Type: Custom::FunctionS3Cleaner
    Properties:
      ServiceToken: !GetAtt FunctionS3Cleaner.Arn
      TargetS3Bucket: !Ref DataBucket

  CleanS3ChallengeBucket:
    Type: Custom::FunctionS3Cleaner
    Properties:
      ServiceToken: !GetAtt FunctionS3Cleaner.Arn
      TargetS3Bucket: !Ref ChallengeBucket

#### End Data Copy ####

#### ReadOnly permission to the user ####
Outputs:
  Region:
    Description: Lab Region
    Value: !Ref AWS::Region
  dataBucket:
    Description: Data Bucket
    Value: !Ref DataBucket
  challengeBucket:
    Description: Challenge Bucket
    Value: !Ref ChallengeBucket
  CommandHostSessionManagementUrl:
    Description: The URL to the Session Management Console for CommandHost
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${CommandHost}?region=${AWS::Region}