AWSTemplateFormatVersion: 2010-09-09
Description: Inspector Workshop template v7
Parameters:
  MyAssetsBucketName:
    Description: Assets bucket name
    Type: String
  MyAssetsBucketPrefix:
    Description: Assets bucket prefix
    Type: String
  LatestAMZNLinuxAMI:
    Description: 'DO NOT CHANGE: The latest AMI ID for Amazon Linux'
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2
  LatestAMZNLinux2AMI:
    Description: 'DO NOT CHANGE: The latest AMI ID for Amazon Linux2'
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  LatestWindows2012R2AMI:
    Description: 'DO NOT CHANGE: The latest AMI ID for Windows 2012R2'
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: >-
      /aws/service/ami-windows-latest/Windows_Server-2012-R2_RTM-English-64Bit-Base
Resources:
  SSMInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
                - ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: S3andSSMAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:DescribeAssociation'
                  - 'ssm:GetDeployablePatchSnapshotForInstance'
                  - 'ssm:GetDocument'
                  - 'ssm:DescribeDocument'
                  - 'ssm:GetManifest'
                  - 'ssm:GetParameters'
                  - 'ssm:GetParameter'
                  - 'ssm:ListAssociations'
                  - 'ssm:ListInstanceAssociations'
                  - 'ssm:PutInventory'
                  - 'ssm:PutComplianceItems'
                  - 'ssm:PutConfigurePackageResult'
                  - 'ssm:UpdateAssociationStatus'
                  - 'ssm:UpdateInstanceAssociationStatus'
                  - 'ssm:UpdateInstanceInformation'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ssmmessages:CreateControlChannel'
                  - 'ssmmessages:CreateDataChannel'
                  - 'ssmmessages:OpenControlChannel'
                  - 'ssmmessages:OpenDataChannel'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ec2messages:AcknowledgeMessage'
                  - 'ec2messages:DeleteMessage'
                  - 'ec2messages:FailMessage'
                  - 'ec2messages:GetEndpoint'
                  - 'ec2messages:GetMessages'
                  - 'ec2messages:SendReply'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstanceStatus'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ds:CreateComputer'
                  - 'ds:DescribeDirectories'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:GetBucketLocation'
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:GetEncryptionConfiguration'
                  - 's3:AbortMultipartUpload'
                  - 's3:ListMultipartUploadParts'
                  - 's3:ListBucket'
                  - 's3:ListBucketMultipartUploads'
                Resource: '*'
              - Sid: S3ListBuckets
                Effect: Allow
                Action:
                  - 's3:ListAllMyBuckets'
                Resource: 'arn:aws:s3:::*'
              - Sid: S3GetObjects
                Effect: Allow
                Action:
                  - 's3:ListBucket'
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:s3:::'
                    - agentbucket-
                    - !Ref 'AWS::AccountId'
                    - /*
      Path: /
  SecurityTeamSecurityGroup:
    DependsOn: VPC
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: Security Team SG
      GroupDescription: >-
        Defines a sepecific Security Group for the security team.  Limited
        inbound access no outbound.
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Security Team SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 172.33.44.55/32
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 127.0.0.1/32
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: !Join 
            - '-'
            - - VPC
              - !Ref 'AWS::StackName'
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - Pub1
              - !Ref 'AWS::StackName'
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: 'false'
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs 
          Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - Priv1
              - !Ref 'AWS::StackName'
  IGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: NatPublicIP
    Properties:
      SubnetId: !Ref PublicSubnet
      AllocationId: !GetAtt 
        - NatPublicIP
        - AllocationId
  NatPublicIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: VPC
    Properties:
      Domain: vpc
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
  PublicSubnetRouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  ConfigBucket:
    Type: 'AWS::S3::Bucket'
    Properties: {}
  ConfigTopic:
    Type: 'AWS::SNS::Topic'
    Properties: {}
  DeliveryChannel:
    Type: 'AWS::Config::DeliveryChannel'
    Properties:
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: Six_Hours
      S3BucketName: !Ref ConfigBucket
      SnsTopicARN: !Ref ConfigTopic
  ConfigurationRecorderRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWS_ConfigRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AssumeRole1
            Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: s3-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 's3:PutObject'
                Resource: !Sub 'arn:aws:s3:::${ConfigBucket}/*'
                Condition:
                  StringLike:
                    's3:x-amz-acl': bucket-owner-full-control
              - Effect: Allow
                Action: 's3:GetBucketAcl'
                Resource: !Sub 'arn:aws:s3:::${ConfigBucket}'
        - PolicyName: sns-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'sns:Publish'
                Resource: !Ref ConfigTopic
  ConfigurationRecorder:
    Type: 'AWS::Config::ConfigurationRecorder'
    Properties:
      RecordingGroup:
        AllSupported: true
        IncludeGlobalResourceTypes: true
      RoleARN: !GetAtt 
        - ConfigurationRecorderRole
        - Arn
  SecHubEnable:
    DependsOn: ConfigurationRecorder
    Type: 'AWS::SecurityHub::Hub'
  GDdetector:
    Type: 'AWS::GuardDuty::Detector'
    Properties:
      Enable: true
      FindingPublishingFrequency: FIFTEEN_MINUTES
  ECRRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: !Join 
        - '-'
        - - dev
          - !Ref 'AWS::AccountId'
          - ecr-repository
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join 
        - '-'
        - - dev
          - !Ref 'AWS::AccountId'
          - s3bucket
  ExampleRepository:
    Type: 'AWS::CodeCommit::Repository'
    DependsOn: S3Bucket
    Properties:
      RepositoryName: ExampleApp
      Code:
        BranchName: main
        S3:
          Bucket: !Ref MyAssetsBucketName
          Key: !Sub "${MyAssetsBucketPrefix}example-app.zip"
  SAMExampleRepository:
    Type: 'AWS::CodeCommit::Repository'
    DependsOn: S3Bucket
    Properties:
      RepositoryName: appsec-serverless-demoapp
      Code:
        BranchName: main
        S3:
          Bucket: !Ref MyAssetsBucketName
          Key: !Sub "${MyAssetsBucketPrefix}appsec-serverless-demoapp.zip"
  CodePipeLineExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
  CodeBuildExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
  CloudformationExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
  BuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/standard:2.0'
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: ECR_REPOSITORY_URI
            Value: !Join 
              - .
              - - !Ref 'AWS::AccountId'
                - dkr.ecr
                - !Ref 'AWS::Region'
                - !Join 
                  - /
                  - - amazonaws.com
                    - !Ref ECRRepository
      Name: !Join 
        - '-'
        - - dev
          - !Ref 'AWS::AccountId'
          - BuildProject
      ServiceRole: !Ref CodeBuildExecutionRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
  CodePipeLine:
    Type: 'AWS::CodePipeline::Pipeline'
    DependsOn: ExampleRepository
    Properties:
      ArtifactStore:
        Location: !Join 
          - '-'
          - - dev
            - !Ref 'AWS::AccountId'
            - s3bucket
        Type: S3
      Name: !Join 
        - '-'
        - - dev
          - !Ref 'AWS::AccountId'
          - CodePipeLine
      RestartExecutionOnUpdate: false
      RoleArn: !GetAtt 
        - CodePipeLineExecutionRole
        - Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                RepositoryName: ExampleApp
                BranchName: main
                PollForSourceChanges: 'true'
              RunOrder: 1
              OutputArtifacts:
                - Name: source-output-artifacts
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                - Name: build-output-artifacts
              InputArtifacts:
                - Name: source-output-artifacts
              Configuration:
                ProjectName: !Ref BuildProject
              RunOrder: 1
  SSMAssocLogs:
    Type: 'AWS::S3::Bucket'
  SSMExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'ssm:StartAssociationsOnce'
                  - 'ssm:CreateAssociation'
                  - 'ssm:CreateAssociationBatch'
                  - 'ssm:UpdateAssociation'
                Resource: '*'
                Effect: Allow
          PolicyName: ssm-association
      Path: /
      ManagedPolicyArns:
        - !Sub >-
          arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonSSMAutomationRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Action: 'sts:AssumeRole'
  SSMInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref SSMInstanceRole
  EC2InstanceDev1:
    Type: 'AWS::EC2::Instance'
    DependsOn: SSMInstanceProfile
    Properties:
      ImageId: !Ref LatestAMZNLinux2AMI
      InstanceType: t3.small
      IamInstanceProfile: !Ref SSMInstanceProfile
      Tags:
        - Key: Environment
          Value: Development
        - Key: Name
          Value: EC2InstanceDev1
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              yum update -y
            - |
              yum install -y
  MainInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SecurityGroup for all the right access
      GroupName: Instance4SecurityGroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 23
          ToPort: 23
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  EC2InstanceDev2:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t3.small
      ImageId: !Ref LatestAMZNLinux2AMI
      IamInstanceProfile: !Ref SSMInstanceProfile
      SecurityGroupIds:
        - !GetAtt 
          - MainInstanceSecurityGroup
          - GroupId
      Tags:
        - Key: Name
          Value: EC2InstanceDev2
        - Key: Environment
          Value: Development
      SubnetId: !Ref PublicSubnet
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              yum install -y java-1.7.0-openjdk-1.7.0.251-2.6.21.0.amzn2.0.1
  EC2InstanceDev3:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t3.small
      ImageId: !Ref LatestAMZNLinux2AMI
      IamInstanceProfile: !Ref SSMInstanceProfile
      SecurityGroupIds:
        - !GetAtt 
          - MainInstanceSecurityGroup
          - GroupId
      Tags:
        - Key: Name
          Value: EC2InstanceDev3
        - Key: Environment
          Value: Development
      SubnetId: !Ref PrivateSubnet
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              yum install -y java-1.7.0-openjdk-1.7.0.251-2.6.21.0.amzn2.0.1
  EC2InstanceProd1:
    Type: 'AWS::EC2::Instance'
    DependsOn: SSMInstanceProfile
    Properties:
      ImageId: !Ref LatestAMZNLinux2AMI
      InstanceType: t3.small
      IamInstanceProfile: !Ref SSMInstanceProfile
      Tags:
        - Key: Environment
          Value: Production
        - Key: Name
          Value: EC2InstanceProd1
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              yum update -y
            - |
              yum install -y
  EC2InstanceProd2:
    Type: 'AWS::EC2::Instance'
    DependsOn: SSMInstanceProfile
    Properties:
      ImageId: !Ref LatestAMZNLinuxAMI
      InstanceType: t3.small
      IamInstanceProfile: !Ref SSMInstanceProfile
      Tags:
        - Key: Environment
          Value: Production
        - Key: Name
          Value: EC2InstanceProd2
  PrivSecurityGroupLoopback:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SecurityGroup for no access
      GroupName: PrivSecurityGroupLoopback
      VpcId: !Ref VPC
      SecurityGroupIngress: []
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 127.0.0.1/32
  EC2InstanceWithIssues:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t3.small
      ImageId: !Ref LatestAMZNLinux2AMI
      SecurityGroupIds:
        - !GetAtt 
          - PrivSecurityGroupLoopback
          - GroupId
      Tags:
        - Key: Name
          Value: EC2InstanceWithIssues
        - Key: Environment
          Value: Development
      SubnetId: !Ref PrivateSubnet
  ExampleLambdaRoleForVulnerabilities:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaPolicyName
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:CreateLogGroup'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/isolate-ec2-security-group:*'
  ExampleLambdaFunction1:
    DependsOn: ExampleLambdaRoleForVulnerabilities
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref MyAssetsBucketName
        S3Key: !Sub "${MyAssetsBucketPrefix}inspector-lambda-test-nodejs-1-vulnerable-function.zip"
      FunctionName: hello-world-example-1-nodejs
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt 
        - ExampleLambdaRoleForVulnerabilities
        - Arn
  ExampleLambdaFunction2:
    DependsOn: ExampleLambdaRoleForVulnerabilities
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref MyAssetsBucketName
        S3Key: !Sub "${MyAssetsBucketPrefix}inspector-lambda-test-nodejs-2-vulnerable-function.zip"
      FunctionName: hello-world-example-2-nodejs
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt 
        - ExampleLambdaRoleForVulnerabilities
        - Arn
